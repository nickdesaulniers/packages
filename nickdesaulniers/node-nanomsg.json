{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/nickdesaulniers/node-nanomsg\">nanomsg for node</a><div class=\"contrib\"></div></h1>\n<p><a href=\"https://travis-ci.org/nickdesaulniers/node-nanomsg\"></a> <a href=\"https://ci.appveyor.com/project/tcr/node-nanomsg\"><img src=\"https://ci.appveyor.com/api/projects/status/07j7o9juuktas2uk\" alt=\"Build status\"></a></p>\n<h3 id=\"install-\">install:</h3>\n<pre><code>npm install nanomsg\n</code></pre><h3 id=\"check-it-out-\">check it out:</h3>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;nano&#xA0;</span><span class=\"keyword operator js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>nanomsg</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;pub&#xA0;</span><span class=\"keyword operator js\"><span>=</span></span><span>&#xA0;nano</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>socket</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>pub</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;sub&#xA0;</span><span class=\"keyword operator js\"><span>=</span></span><span>&#xA0;nano</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>socket</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>sub</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;addr&#xA0;</span><span class=\"keyword operator js\"><span>=</span></span><span>&#xA0;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>tcp://127.0.0.1:7789</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>pub</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>bind</span><span class=\"meta brace round js\"><span>(</span></span><span>addr</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>sub</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>connect</span><span class=\"meta brace round js\"><span>(</span></span><span>addr</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>sub</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>on</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>data</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&#xA0;</span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>buf</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"support class js\"><span>String</span></span><span class=\"meta brace round js\"><span>(</span></span><span>buf</span><span class=\"meta brace round js\"><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;pub</span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>close</span></span><span class=\"meta brace round js\"><span>(</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;sub</span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>close</span></span><span class=\"meta brace round js\"><span>(</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"support function js\"><span>setTimeout</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&#xA0;</span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;pub</span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>send</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>Hello&#xA0;from&#xA0;nanomsg!</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>100</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div>\n</code></pre>\n<h2 id=\"api\">API</h2>\n<h3 id=\"nano-socket-type-options-\">nano.socket(type, [options,])</h3>\n<p>Starts a new socket. The nanomsg socket can bind or connect to multiple heterogeneous endpoints as well as shutdown any of these established links.</p>\n<h4 id=\"-options-\"><code>options</code></h4>\n<ul>\n<li><code>&apos;raw&apos;</code> <em>(Boolean, default: <code>false</code>)</em>: determines the domain of the socket. <code>AF_SP</code>, the default, creates a standard full-blown SP socket. <code>AF_SP_RAW</code> family sockets operate over internal network protocols and interfaces. Raw sockets omit the end-to-end functionality found in <code>AF_SP</code> sockets and thus can be used to implement intermediary devices in SP topologies, see <a href=\"http://nanomsg.org/v0.5/nn_socket.3.html\">nanomsg docs</a> or consult your man page entry <code>socket(2)</code> for more info.<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>ex.&#xA0;starting&#xA0;raw&#xA0;sockets</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>nano</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>socket</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>bus</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&#xA0;raw</span><span class=\"keyword operator js\"><span>:</span></span><span>&#xA0;</span><span class=\"constant language boolean true js\"><span>true</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span><span>&#xA0;</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div>\n</code></pre>\n</li>\n<li><code>&apos;tcpnodelay&apos;</code> <em>(Boolean, default: <code>false</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#sockettcpnodelayboolean\"><code>socket.tcpnodelay(boolean)</code></a></li>\n<li><code>&apos;linger&apos;</code> <em>(Number, default: <code>1000</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketlingerduration\"><code>socket.linger(duration)</code></a></li>\n<li><code>&apos;sndbuf&apos;</code> <em>(Number, size in bytes, default: <code>128kB</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketsndbufsize\"><code>socket.sndbuf(size)</code></a></li>\n<li><code>&apos;rcvbuf&apos;</code> <em>(Number, size in bytes, default: <code>128kB</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketrcvbufsize\"><code>socket.rcvbuf(size)</code></a></li>\n<li><code>&apos;sndtimeo&apos;</code> <em>(Number, default: <code>-1</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketsndtimeoduration\"><code>socket.sndtimeo(duration)</code></a></li>\n<li><code>&apos;rcvtimeo&apos;</code> <em>(Number, default: <code>-1</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketrcvtimeoduration\"><code>socket.rcvtimeo(duration)</code></a></li>\n<li><code>&apos;reconn&apos;</code> <em>(Number, default: <code>100</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketreconnduration\"><code>socket.reconn(duration)</code></a></li>\n<li><code>&apos;maxreconn&apos;</code> <em>(Number, default: <code>0</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketmaxreconnduration\"><code>socket.maxreconn(duration)</code></a></li>\n<li><code>&apos;sndprio&apos;</code> <em>(Number, default: <code>0</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketsndpriopriority\"><code>socket.sndprio(priority)</code></a></li>\n<li><code>&apos;rcvprio&apos;</code> <em>(Number, default: <code>0</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketrcvpriopriority\"><code>socket.rcvprio(priority)</code></a></li>\n<li><code>&apos;ipv6&apos;</code> <em>(Boolean, default: <code>false</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketipv6boolean\"><code>socket.ipv6(boolean)</code></a></li>\n<li><code>&apos;chan&apos;</code> <em>(Array, default: <code>[&apos;&apos;]</code>)</em>: see <a href=\"https://github.com/nickdesaulniers/node-nanomsg#socketchanarray\"><code>socket.chan(Array)</code></a></li>\n</ul>\n<h3 id=\"socket-shutdown-address-\">socket.shutdown(address)</h3>\n<p><em>(Function, param: String)</em>: Removes an endpoint established  by calls to <code>bind()</code> or <code>connect()</code>. The nanomsg library will try to deliver any outstanding outbound messages to the endpoint for the time specified by <code>linger</code>.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>shutdown</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>tcp://127.0.0.1:5555</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-bind-address-\">socket.bind(address)</h3>\n<p><em>(Function, param: String)</em>: Adds a local endpoint to the socket. The endpoint can be then used by other applications to connect.</p>\n<p><code>bind()</code> (or <code>connect()</code>) may be called multiple times on the same socket thus allowing the socket to communicate with multiple heterogeneous endpoints.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>bind</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>tcp://eth0:5555</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div>\n</code></pre>\n<p><em><sub>recommend checking your machine&apos;s <code>ifconfig</code> first before using a named interface. <code>ipconfig</code> on windows.</sub></em></p>\n<h3 id=\"socket-connect-address-\">socket.connect(address)</h3>\n<p><em>(Function, param: String)</em>: Adds a remote endpoint to the socket. The nanomsg library would then try to connect to the specified remote endpoint.</p>\n<p><code>connect()</code> (as well as <code>bind()</code>) may be called multiple times on the same socket thus allowing the socket to communicate with multiple heterogeneous endpoints.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>connect</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>tcp://127.0.0.1:5555</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div>\n</code></pre>\n<p><em><sub>When connecting over remote TCP allow <code>100ms</code> or more depending on round trip time for the operation to complete.</sub></em></p>\n<h5 id=\"_-a-note-on-address-strings-docs-address_strings-markdown-_\">_<a href=\"http://github.com/nickdesaulniers/node-nanomsg/blob/master/docs/address_strings.markdown\">a note on address strings</a>_</h5>\n<h3 id=\"socket-close-\">socket.close()</h3>\n<p><em>(Function, param: Function)</em>: Closes the socket. Any buffered inbound messages that were not yet received by the application will be discarded. The nanomsg library will try to deliver any outstanding outbound messages for the time specified by <code>linger</code>.</p>\n<h2 id=\"sending-and-receiving-writable-and-readable\">sending and receiving: writable and readable</h2>\n<h3 id=\"socket-send-msg-\">socket.send(msg)</h3>\n<p><em>(Function, param: String or Buffer)</em>: send a message.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>send</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>hello&#xA0;from&#xA0;nan&#xF8;msg!</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div>\n</code></pre>\n<p><code>send(msg)</code> is automatically invoked during <code>Writable</code> consumption of some other <code>Readable</code> stream. In that case a <code>Writable</code>&apos;s <code>pipe()</code> method can be used to transmit across readable data sources. See <a href=\"http://github.com/nickdesaulniers/node-nanomsg/blob/master/examples/writablepipe.js\">example for more detail</a>. The flow of data distributes to endpoint(s) determined by the particular socket type.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;source&#xA0;</span><span class=\"keyword operator js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>fs</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span>createReadStream</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>filename.ext</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>source</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>pipe</span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>sends&#xA0;each&#xA0;chunk&#xA0;as&#xA0;a&#xA0;msg&#xA0;to&#xA0;socket&apos;s&#xA0;particular&#xA0;endpoint</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-on-data-callback-\">socket.on(&apos;data&apos;, callback)</h3>\n<p><em>(Function, param order: String, Function)</em>: The <code>Readable</code> stream&apos;s <code>on()</code> function is an event listener that emits <code>&apos;data&apos;</code> events. To receive messages, pass the string <code>&apos;data&apos;</code> followed a callback containing a single data parameter.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;the&#xA0;default&#xA0;inbound&#xA0;message&#xA0;is&#xA0;a&#xA0;node&#xA0;buffer</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;setEncoding&#xA0;sets&#xA0;the&#xA0;message&#xA0;type,&#xA0;use&#xA0;utf8&#xA0;to&#xA0;receive&#xA0;strings&#xA0;instead.</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>setEncoding</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>utf8</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>on</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>data</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&#xA0;</span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>msg</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>msg</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&apos;hello&#xA0;from&#xA0;nan&#xF8;msg!&apos;</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div>\n</code></pre>\n<p>The readable stream&apos;s <code>data</code> event is automatically invoked when piped to a <code>Writable</code> or <code>Transform</code> consumer stream. See <a href=\"http://github.com/nickdesaulniers/node-nanomsg/blob/master/examples/transforms.js\">example for more detail</a>. Here <code>msgprocessor</code> is a transform you could pipe to a writable or the next transform:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;through&#xA0;</span><span class=\"keyword operator js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>through</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;msgprocessor&#xA0;</span><span class=\"keyword operator js\"><span>=</span></span><span>&#xA0;through</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>msg</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;str&#xA0;</span><span class=\"keyword operator js\"><span>=</span></span><span>&#xA0;msg</span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&apos;hello&#xA0;from&#xA0;nan&#xF8;msg&apos;</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span>queue</span><span class=\"meta brace round js\"><span>(</span></span><span>str&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>&#xA0;and&#xA0;cheers!</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>pipe</span><span class=\"meta brace round js\"><span>(</span></span><span>msgprocessor</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>msg&#xA0;transformed&#xA0;to:&#xA0;&apos;hello&#xA0;from&#xA0;nan&#xF8;msg&#xA0;and&#xA0;cheers!&apos;</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h2 id=\"subscription-api\">subscription api</h2>\n<h3 id=\"socket-chan-array-\">socket.chan(Array)</h3>\n<p><em>(Function, param: Array of Strings, default: <code>[&apos;&apos;]</code>)</em>: Allows for sub sockets\nto filter messages based on a prefix. Not applicable to non sub sockets.</p>\n<p>By default, all sub sockets are subscribed to the <code>&apos;&apos;</code> channel.  Once you opt\nin to filtering on a channel, you are unsubscribed from <code>&apos;&apos;</code>.</p>\n<h3 id=\"socket-rmchan-string-\">socket.rmchan(String)</h3>\n<p><em>(Function, param: String)</em>: Allows for sub sockets to remove channel filters.\nNot applicable to non sub sockets. This function is variadic; you can pass\nmultiple strings and all will be unfiltered.</p>\n<p>If you unsubscribe from the default channel, <code>&apos;&apos;</code>, without subscribing to any\nnew channels, your sub socket will stop receiving messages.</p>\n<h2 id=\"sockopt-api\">sockopt api</h2>\n<h3 id=\"socket-tcpnodelay-boolean-\">socket.tcpnodelay(boolean)</h3>\n<p><em>(Function, param: Boolean, default: false)</em>: When set, disables Nagle&#x2019;s algorithm. It also disables delaying of TCP acknowledgments. Using this option improves latency at the expense of throughput.</p>\n<p>Pass no parameter for current tcp nodelay setting.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>default</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>tcpnodelay</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>tcp&#xA0;nodelay:&#xA0;off</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>tcpnodelay</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant language boolean true js\"><span>true</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>disabling&#xA0;Nagle&apos;s&#xA0;algorithm</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>tcpnodelay</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>tcp&#xA0;nodelay:&#xA0;on</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-linger-duration-\">socket.linger(duration)</h3>\n<p><em>(Function, param: Number, default: <code>1000</code>)</em>: Specifies how long the socket should try to send pending outbound messages after <code>socket.close()</code> or <code>socket.shutdown()</code> is called, in milliseconds.</p>\n<p>Pass no parameter for the linger duration.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>linger</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>5000</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>linger</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>5000</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-sndbuf-size-\">socket.sndbuf(size)</h3>\n<p><em>(Function, param: Number, size in bytes, default: <code>128kB</code>)</em>: Size of the send buffer, in bytes. To prevent blocking for messages larger than the buffer, exactly one message may be buffered in addition to the data in the send buffer.</p>\n<p>Pass no parameter for the socket&apos;s send buffer size.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>sndbuf</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>131072</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>sndbuf</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;131072</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-rcvbuf-size-\">socket.rcvbuf(size)</h3>\n<p><em>(Function, param: Number, size in bytes, default: <code>128kB</code>)</em>: Size of the receive buffer, in bytes. To prevent blocking for messages larger than the buffer, exactly one message may be buffered in addition to the data in the receive buffer.</p>\n<p>Pass no parameter for the socket&apos;s receive buffer size.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>rcvbuf</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>20480</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>rcvbuf</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;20480</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-sndtimeo-duration-\">socket.sndtimeo(duration)</h3>\n<p><em>(Function, param: Number, default: <code>-1</code>)</em>: The timeout for send operation on the socket, in milliseconds.</p>\n<p>Pass no parameter for the socket&apos;s send timeout.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>sndtimeo</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>200</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>sndtimeo</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;200</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-rcvtimeo-duration-\">socket.rcvtimeo(duration)</h3>\n<p><em>(Function, param: Number, default: <code>-1</code>)</em>: The timeout for recv operation on the socket, in milliseconds.</p>\n<p>Pass no parameter for the socket&apos;s recv timeout.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>rcvtimeo</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>50</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>rcvtimeo</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;50</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-reconn-duration-\">socket.reconn(duration)</h3>\n<p><em>(Function, param: Number, default: <code>100</code>)</em>: For connection-based transports such as TCP, this option specifies how long to wait, in milliseconds, when connection is broken before trying to re-establish it. Note that actual reconnect interval may be randomized to some extent to prevent severe reconnection storms.</p>\n<p>Pass no parameter for the socket&apos;s <code>reconnect</code> interval.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>reconn</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>600</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>reconn</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;600</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-maxreconn-duration-\">socket.maxreconn(duration)</h3>\n<p><em>(Function, param: Number, default: <code>0</code>)</em>: <strong>Only to be used in addition to <code>socket.reconn()</code>.</strong> <code>maxreconn()</code> specifies maximum reconnection interval. On each reconnect attempt, the previous interval is doubled until <code>maxreconn</code> is reached. Value of zero means that no exponential backoff is performed and reconnect interval is based only on <code>reconn</code>. If <code>maxreconn</code> is less than <code>reconn</code>, it is ignored.</p>\n<p>Pass no parameter for the socket&apos;s <code>maxreconn</code> interval.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>maxreconn</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>60000</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>maxreconn</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;60000</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-sndprio-priority-\">socket.sndprio(priority)</h3>\n<p><em>(Function, param: Number, default: <code>8</code>)</em>: Sets outbound priority for endpoints subsequently added to the socket.</p>\n<p>This option has no effect on socket types that send messages to all the peers. However, if the socket type sends each message to a single peer (or a limited set of peers), peers with high priority take precedence over peers with low priority.</p>\n<p>Highest priority is 1, lowest is 16. Pass no parameter for the socket&apos;s current outbound priority.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>sndprio</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>sndprio</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;2</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-rcvprio-priority-\">socket.rcvprio(priority)</h3>\n<p><em>(Function, param: Number, default: <code>8</code>)</em>: Sets inbound priority for endpoints subsequently added to the socket.</p>\n<p>This option has no effect on socket types that are not able to receive messages.</p>\n<p>When receiving a message, messages from peer with higher priority are received before messages from peer with lower priority.</p>\n<p>Highest priority is 1, lowest is 16. Pass no parameter for the socket&apos;s current inbound priority.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>rcvprio</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>10</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>rcvprio</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;10</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h3 id=\"socket-ipv6-boolean-\">socket.ipv6(boolean)</h3>\n<p><em>(Function, param: Boolean, default: <code>false</code>)</em>: Allows for the use of IPv6 addresses to bind or connect to.</p>\n<p>By default, nanomsg only works with IPv4 addresses, and support for IPv6 addresses must explicitly be enabled.</p>\n<p>If enabled, both IPv4 and IPv6 addresses can be used.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>ipv6</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant language boolean true js\"><span>true</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"support function js console\"><span>.log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>socket</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>ipv6</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;true</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h2 id=\"test\">test</h2>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;git&#xA0;clone&#xA0;https://github.com/nickdesaulniers/node-nanomsg.git&#xA0;nano</span></span></div><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;</span><span class=\"support function builtin shell\"><span>cd</span></span><span>&#xA0;nano&#xA0;</span><span class=\"keyword operator list shell\"><span>&amp;&amp;</span></span><span>&#xA0;git&#xA0;submodule&#xA0;update&#xA0;--init</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source shell\"><span class=\"comment line number-sign shell\"><span class=\"punctuation definition comment shell\"><span>#</span></span><span>&#xA0;now&#xA0;you&#xA0;can&#xA0;build&#xA0;the&#xA0;project&#xA0;and&#xA0;run&#xA0;the&#xA0;test&#xA0;suite:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;make&#xA0;</span><span class=\"keyword operator list shell\"><span>&amp;&amp;</span></span><span>&#xA0;make&#xA0;check</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source shell\"><span class=\"comment line number-sign shell\"><span class=\"punctuation definition comment shell\"><span>#</span></span><span>&#xA0;or&#xA0;perhaps&#xA0;you&apos;d&#xA0;prefer&#xA0;to&#xA0;use&#xA0;the&#xA0;npm&#xA0;commands&#xA0;instead:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;npm&#xA0;i</span></span></div><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;npm&#xA0;t</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source shell\"><span class=\"comment line number-sign shell\"><span class=\"punctuation definition comment shell\"><span>#</span></span><span>&#xA0;let&apos;s&#xA0;say&#xA0;you&#xA0;switch&#xA0;to&#xA0;another&#xA0;version&#xA0;of&#xA0;node/iojs,&#xA0;you&#xA0;might&#xA0;want&#xA0;to&#xA0;run:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;make&#xA0;clean&#xA0;</span><span class=\"keyword operator list shell\"><span>&amp;&amp;</span></span><span>&#xA0;make&#xA0;</span><span class=\"keyword operator list shell\"><span>&amp;&amp;</span></span><span>&#xA0;make&#xA0;check</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source shell\"><span class=\"comment line number-sign shell\"><span class=\"punctuation definition comment shell\"><span>#</span></span><span>&#xA0;for&#xA0;the&#xA0;super&#xA0;deluxe&#xA0;make&#xA0;clean,&#xA0;rebuild,&#xA0;and&#xA0;test&#xA0;suite:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;make&#xA0;full</span></span></div>\n</code></pre>\n<p>Note: you must <code>git submodule update --init</code> to initialize the nanomsg repository.</p>\n<h2 id=\"performance\">performance</h2>\n<p>run benchmarks:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;make&#xA0;perf</span></span></div>\n</code></pre>\n<p>for more info how to do that and your own custom comparisons check out: <a href=\"https://github.com/JustinTulloss/zeromq.node#running-benchmarks\">running benchmarks</a></p>\n<p>and if you want you can also run:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;make&#xA0;bench</span></span></div>\n</code></pre>\n<p>:)</p>\n<h2 id=\"contributing\">contributing</h2>\n<p>Issues and pull requests welcome!</p>\n<h2 id=\"formatting\">formatting</h2>\n<h3 id=\"c-c-\">C/C++</h3>\n<p>Please run <code>clang-format -style=Mozilla -i &lt;file&gt;</code> on all C/C++ code.</p>\n<h3 id=\"js\">JS</h3>\n<p>WIP</p>\n<h2 id=\"license\">license</h2>\n<p>MIT</p>\n"}